name: 'Pull Request'

on:
  pull_request:
    branches:
      - master

env:
  PROJECT: companies
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12'
          check-latest: true

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test
      
      - name: Build functions
        run: npm run build

  development:
    name: 'Development'
    runs-on: ubuntu-latest
    needs: [build]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize terraform and select workspace.
      - name: Init Terraform
        run: |
          terraform init
          terraform workspace select dev

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Lint terraform
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Plan
        run: terraform plan -out=plan.tfplan

      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.Plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Upload plan
        uses: keithweaver/aws-s3-github-action@master
        env:
          source: ./plan.tfplan
          destination: s3://terraform-plan-mediacodex/dev/$PROJECT/${{ github.event.number }}.tfplan

  production:
    name: 'Production'
    runs-on: ubuntu-latest
    needs: [build]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize terraform and select workspace.
      - name: Init Terraform
        run: |
          terraform init -backend-config "bucket=mediacodex-dev-terraform-state" -backend-config "dynamodb_table=prod-terraform-lock"
          terraform workspace select prod

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Lint terraform
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Plan
        run: terraform plan -out=plan.tfplan

      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.Plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Upload plan
        uses: keithweaver/aws-s3-github-action@master
        env:
          source: ./plan.tfplan
          destination: s3://terraform-plan-mediacodex/prod/$PROJECT/${{ github.event.number }}.tfplan