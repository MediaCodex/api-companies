name: 'Terraform Plan'

on:
  pull_request_target:
    branches:
      - develop
      - master

jobs:
  plan:
    name: 'Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        PROJECT: companies


    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      # Setup environment variables
      - name: Setup env (dev)
        if: github.ref == 'refs/heads/develop'
        uses: allenevans/set-env@v1.0.0
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          TERRAFORM_WORKSPACE: development

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Select Workspace
        run: terraform workspace select ${TERRAFORM_WORKSPACE}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        if: github.event_name != 'push'
        run: terraform plan -out=plan.tfplan

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      
      - name: Upload plan
        if: github.event_name != 'push'
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: terraform-state-mediacodex
          SOURCE_DIR: plan.tfplan
          DEST_DIR: github-actions-plans/${TERRAFORM_WORKSPACE}/${project}-${{github.sha}}.tfplan

      # Auto-deploy for manual pushes to dev
      - name: Terraform Manual Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve