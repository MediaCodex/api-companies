name: 'Deploy'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      -  master
    types:
      - closed

env:
  PROJECT: companies
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12'
          check-latest: true

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test
      
      - name: Build functions
        run: npm run build

      - name: Build Docker
        run: |
          docker build -t $PROJECT:latest .
          docker save -o build/docker-$PROJECT.tar $PROJECT:latest

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/
          retention-days: 5

  development:
    name: 'Deploy Dev'
    runs-on: ubuntu-latest
    environment: Development
    needs: [build]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

    # Use the Bash shell and set working dir
    defaults:
      run:
        shell: bash
        working-directory: terraform/
    
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2
      
      # Download docker image and lambda functions
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ../

      - name: list artifacts
        run: ls -R ../

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize terraform and select workspace.
      - name: Init Terraform
        run: |
          terraform init
          terraform workspace select dev

      # Auto apply
      - name: Auto apply
        if: ${{ github.event_name == 'push' }}
        run: terraform apply -auto-approve

      # Download plan
      - name: Download plan
        uses: keithweaver/aws-s3-github-action@master
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == 'true' }}
        env:
          source: s3://terraform-plan-mediacodex/dev/$PROJECT/${{ github.event.number }}.tfplan
          destination: ./dev.tfplan

      # Apply plan
      - name: Apply plan
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == 'true' }}
        run: terraform apply -auto-approve dev.tfplan

      # get ECR config from terraform state
      - name: Get ECR repo
        id: ecr
        run: terraform output ecr_repo

      # login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Tag and push docker image
      - name: Push docker image
        env:
          ECR_REPO: ${{ steps.ecr.outputs.stdout }}
        run: |
          docker load --input build/docker-$PROJECT.tar
          docker tag "$PROJECT:latest" "$ECR_REPO:latest"
          docker push $ECR_REPO


  production:
    name: 'Deploy prod'
    runs-on: ubuntu-latest
    environment: Production

    # enforce dev-first and PR only deployments
    needs: [build, development]
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == 'true' }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}

    # Use the Bash shell and set working dir
    defaults:
      run:
        shell: bash
        working-directory: terraform/
    
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2

      # Download docker image and lambda functions
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ../

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize terraform and select workspace.
      - name: Init Terraform
        run: |
          terraform init -backend-config "bucket=mediacodex-prod-terraform-state" -backend-config "dynamodb_table=prod-terraform-lock"
          terraform workspace select prod

      # Download plan
      - name: Download plan
        uses: keithweaver/aws-s3-github-action@master
        env:
          source: s3://terraform-plan-mediacodex/prod/$PROJECT/${{ github.event.number }}.tfplan
          destination: ./prod.tfplan

      # Apply plan
      - name: Apply Plan
        run: terraform apply -auto-approve prod.tfplan

      # get ECR config from terraform state
      - name: Get ECR repo
        id: ecr
        run: terraform output ecr_repo

      # login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Tag and push docker image
      - name: Push docker image
        env:
          ECR_REPO: ${{ steps.ecr.outputs.stdout }}
        run: |
          docker load --input build/docker-$PROJECT.tar
          docker tag "$PROJECT:latest" "$ECR_REPO:latest"
          docker push $ECR_REPO